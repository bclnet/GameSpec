=== Interface

**Interface: Navigating Game Assets**

In the intricate realm of managing game assets, the Interface plays a pivotal role, providing a structured pathway to access the diverse array of digital content. At the heart of this journey lies the Family object, serving as the gateway to unlocking the treasure trove of game assets. The process begins with the Family Manager, where a specific Family can be requested, initiating a seamless interface for asset exploration.

The Family object acts as a dynamic key, unlocking the door to a multitude of possibilities. From this vantage point, a PakFile, a container encapsulating various game resources, can be effortlessly opened using a Resource definition or URI. This marks the initiation of a journey into the heart of game assets, where each resource holds a unique piece of the digital puzzle.

Once the PakFile is accessed, a myriad of methods becomes available, each designed to facilitate a nuanced exploration of individual resources. The Open method invites you to delve into the contents of the PakFile, while Contains acts as a guiding beacon, signaling the presence of specific resources within the container. The asynchronous methods, LoadFileDataAsync and LoadFileObjectAsync, introduce a dynamic dimension to the interface, allowing for fluid and responsive interactions with the game assets.

In essence, the Interface serves as the compass guiding archivists and digital creators through the intricate web of game assets. The Family object, acting as the linchpin, opens the doors to exploration, while the PakFile and its associated methods provide the tools necessary for a nuanced and comprehensive understanding of each resource. As we navigate through this Interface, we embark on a journey of discovery, unlocking the potential within game assets and laying the foundation for effective archival and creative endeavors.

==== Resource Uri format

* Family: parse resources from a family
* Schema: game, file, http, and https are supported schemas.
* Fragment: the fragment is used to determine the game
* A filesystem object is created and associate with the resouce, either to a local or remote connection 

[NOTE]
====
Note the importance of a Game ID in the url #fragment.
====

[cols="3,1,1,1"]
|===
|example |schema |query |game

|game:/MASTER.DAT#Fallout
|game
|MASTER.DAT
|Fallout

4+|Gets the MASTER.DAT pakfile for Fallout from a game search

|file:///G:/GogLibrary/Fallout/MASTER.DAT#Fallout
|file
|MASTER.DAT
|Fallout

4+|Gets the MASTER.DAT pakfile for Fallout from the filesystem

|https://localhost/MASTER.DAT#Fallout
|https
|MASTER.DAT
|Fallout

4+|Gets the MASTER.DAT pakfile for Fallout from the network

|===

[NOTE]
====
The following python code are examples of interacting with the FamilyManager.
====

[,python]
----
include::../python/Tests.py[]
----
