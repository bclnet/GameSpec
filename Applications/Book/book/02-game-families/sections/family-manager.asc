=== Family Manager

The Family Manager is the repository for Families, Games, and File Manager data pertinent to Game Specs. It undertakes the parsing of JSON files, efficiently managing and extracting the relevant information.

Each family has a json file. The game ids that start with * becomes the default game entry from which missing attributes are read from.
Along with family information the json file contains the engine, games and file manager elements.

Family:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the family

|name
|string
|name of the family

|studio
|string
|the studio related to the family

|description
|string
|a description for the family

|url
|url(s)
|urls related to this family

|engines
|FamilyEngine
|the related game engines

|games
|FamilyGame
|the related games

|fileManager
|FileManager
|the related file manager
|===

The following Family class will parse the json file. 

[,python]
----
class Family:
    def __init__(s, d):
        s.id = d['id']
        s.name = d['name'] if 'name' in d else None
        s.studio = d['studio'] if 'studio' in d else None
        s.description = d['description'] if 'description' in d else None
        s.urls = (d['url'] if isinstance(d['url'], list) else [d['url']]) if 'url' in d else []
        # engines
        s.engines = engines = {}
        if 'engines' in d:
            for (id, val) in d['engines'].items():
                engines[id] = FamilyEngine(s, id, val)
        # games
        s.games = games = {}
        dgame = FamilyGame(None, s, None, None)
        if 'games' in d:
            for (id, val) in d['games'].items():
                game = FamilyGame(dgame, s, id, val)
                if id.startswith('*'): dgame = game
                else: games[id] = game
        # file manager
        s.fileManager = FileManager.FileManager(d['fileManager']) if 'fileManager' in d else None
    def __repr__(s): return f'''
{s.id}: {s.name}
engines: {[x for x in s.engines.values()] if s.engines else None}
games: {[x for x in s.games.values()] if s.games else None}
fileManager: {s.fileManager if s.fileManager else None}'''

    # get Game
    def getGame(s, id, throwOnError = True):
        game = s.games[id] if id in s.games else None
        if not game and throwOnError: raise Exception(f'Unknown game: {id}')
        return game
----

Family Engine:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the engine

|name
|string
|name of the engine
|===

The engine elements are simple with the following class:

[,python]
----
class FamilyEngine:
    def __init__(s, family, id, d):
        s.family = family
        s.id = id
        s.name = d['name'] if 'name' in d else None
    def __repr__(s): return f'\n  {s.id}: {s.name}'
----

Family Game:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the game

|ignore
|boolean
|true if ignore this game, uses 'n/a' as the element

|name
|string
|name of the game

|engine
|string
|the engine used by this game

|url
|url(s)
|urls related to this family

|date
|date
|the release date

|pakExt
|string(s)
|the file extensions for archive files

|path
|string(s)
|paths to include

|key
|string
|the encryption key if needed

|searchBy
|picklist
|the way to find files for this game

|pakFileType
|string(s)
|the file extensions for archive files

|status
|string(s)
|the current decoding status for this game

|tags
|string(s)
|additonal tags for this game

|editions
|FamilyEngine
|the related game editions

|dlc
|FamilyGame
|the related downloadable content

|locales
|FileManager
|the related locales
|===


The game element are more complicated containing sub classes and handled with the following class:
[,python]
----
class FamilyGame:
    class Edition:
        def __init__(s, id, d):
            s.id = id
            s.name = d['name'] if 'name' in d else None
            s.key = d['key'] if 'key' in d else None
        def __repr__(s): return f'{s.id}: {s.name}'
    class DownloadableContent:
        def __init__(s, id, d):
            s.id = id
            s.name = d['name'] if 'name' in d else None
            s.path = d['path'] if 'path' in d else None
        def __repr__(s): return f'{s.id}: {s.name}'
    class Locale:
        def __init__(s, id, d):
            s.id = id
            s.name = d['name'] if 'name' in d else None
        def __repr__(s): return f'{s.id}: {s.name}'
    def __init__(s, dgame, family, id, d):
        s.family = family
        s.id = id
        if not dgame: s.ignore = False; s.engine = s.searchBy = s.pakExts = s.paths = s.pakFileType = None; return
        s.ignore = d['n/a'] if 'n/a' in d else dgame.ignore
        s.name = d['name'] if 'name' in d else None
        s.engine = d['engine'] if 'engine' in d else dgame.engine
        s.urls = (d['url'] if isinstance(d['url'], list) else [d['url']]) if 'url' in d else None
        s.date = d['date'] if 'date' in d else None
        s.pakExts = (d['pakExt'] if isinstance(d['pakExt'], list) else [d['pakExt']]) if 'pakExt' in d else dgame.pakExts
        s.paths = (d['path'] if isinstance(d['path'], list) else [d['path']]) if 'path' in d else dgame.paths
        s.key = d['key'] if 'key' in d else None
        s.searchBy = d['searchBy'] if 'searchBy' in d else dgame.searchBy
        s.pakFileType = d['pakFileType'] if 'pakFileType' in d else dgame.pakFileType
        s.status = d['status'] if 'status' in d else []
        s.tags = d['tags'] if 'tags' in d else None
        # editions
        s.editions = editions = {}
        if 'editions' in d:
            for (id, val) in d['editions'].items():
                editions[id] = FamilyGame.Edition(id, val)
        # dlc
        s.dlc = dlc = {}
        if 'dlc' in d:
            for (id, val) in d['dlc'].items():
                dlc[id] = FamilyGame.DownloadableContent(id, val)
        # locales
        s.locales = locales = {}
        if 'locales' in d:
            for (id, val) in d['locales'].items():
                locales[id] = FamilyGame.Locale(id, val)
    def __repr__(s): return f'''
  {s.id}: {s.name} {s.status}
  - editions: {s.editions if s.editions else None}
  - dlc: {s.dlc if s.dlc else None}
  - locales: {s.locales if s.locales else None}'''
----


[NOTE]
====
The following python code will parse the json files.
====

[,python]
----
include::../python/FamilyManager.py[]
----
