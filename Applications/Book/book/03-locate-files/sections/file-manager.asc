=== File Manager

The File Manager serves as a centralized repository for essential file information, encompassing Paths, Ignores, and Filters. The process of locating Paths within game folders involves meticulous searches in specific directories, existing store managers, or the Windows Registry. To streamline this endeavor, three distinct methods are employed:

- **Get Path By Directory:** This method diligently explores game-specified folders, primarily situated in the /Games directory.

- **Get Path By Store Key:** Broadening the search horizon, this method delves into game-specified store managers, including the Blizzard Store Manager, Epic Store Manager, GOG Store Manager, and Steam Store Manager.

- **Get Path By Registry Key:** Venturing into the Windows Registry, this method navigates specified registry keys across locations such as HKEY_LOCAL_MACHINE/SOFTWARE, KEY_CURRENT_USER/SOFTWARE, and HKEY_CLASSES_ROOT/VirtualStore/MACHINE/SOFTWARE. Upon identifying a relevant registry key, the directory is sought through searches in registry key values like Path, Install Dir, InstallDir, InstallLocation, or by extracting directory information from associated files.

Acknowledging the nuanced organization of games, the process accommodates instances where certain games initiate in a sub-folder of the root game directory. Games retain the flexibility to specify additional paths, seamlessly amalgamating them with the initially identified root folder for a comprehensive approach to game directory location.


[COMMENT]
====
findRegistryPath(...) with locate registry keys within this function:
1. Search for the game using the specified registry key(s) in the Windows Registry under the following locations:
    HKEY_LOCAL_MACHINE/SOFTWARE
    KEY_CURRENT_USER/SOFTWARE
    HKEY_CLASSES_ROOT/VirtualStore/MACHINE/SOFTWARE
2. Once a registry key is found a directory is attempted to be located by searching the following registry key values:
    Path
    Install Dir
    InstallDir
    InstallLocation
3. Or getting the directory location from the file set in the following values:
    Installed Path
    ExePath
    Exe
====

[,python]
----
def findRegistryPath(paths):
    for p in paths:
        keyPath = p.replace('/', '\\')
        try: key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, f'SOFTWARE\\{keyPath}', 0, winreg.KEY_READ)
        except FileNotFoundError:
            try: key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, f'SOFTWARE\\{keyPath}', 0, winreg.KEY_READ)
            except FileNotFoundError:
                try: key = winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, f'VirtualStore\\MACHINE\\SOFTWARE\\{keyPath}', 0, winreg.KEY_READ)
                except FileNotFoundError: key = None
        if key is None: continue
        # search directories
        path = None
        for search in ['Path', 'Install Dir', 'InstallDir', 'InstallLocation']:
            try:
                val = winreg.QueryValueEx(key, search)[0]
                if os.path.isdir(val): path = val; break
            except FileNotFoundError: continue
        # search files
        if path is None:
            for search in ['Installed Path', 'ExePath', 'Exe']:
                try:
                    val = winreg.QueryValueEx(key, search)[0]
                    if os.path.exists(val): path = val; break
                except FileNotFoundError: continue
            if path is not None: path = os.path.dirname(path)
        if path is not None and os.path.isdir(path): return path
    return None
----


[COMMENT]
====
getPathWithSpecialFolders(...) with replace: %Path%, %AppPath%, %AppData%, %LocalAppData% within this function
====

[,python]
----
def getPathWithSpecialFolders(path, rootPath):
    return f'{rootPath}{path[6:]}' if path.startswith('%Path%') else \
    f'{FileManager.ApplicationPath}{path[9:]}' if path.startswith('%AppPath%') else \
    f'{os.getenv('APPDATA')}{path[9:]}' if path.startswith('%AppData%') else \
    f'{os.getenv('LOCALAPPDATA')}{path[14:]}' if path.startswith('%LocalAppData%') else \
    path
----


[NOTE]
====
The following combined python code will be our FileManager.
====

[,python]
----
include::../python/FileManager.py[]
----
