=== File Manager

**Centralized File Management: Navigating Paths, Ignores, and Filters**

Within the realm of efficient file management, a File Manager takes center stage, consolidating critical information such as Paths, Ignores, and Filters.

Paths, the navigational threads within game folders, are uncovered through meticulous exploration in specific directories, existing store managers, or the windows registry. The File Manager offers a set of methods designed to streamline this process:

- **getPathByDirectory:** Initiates a search for the game in specified folders within the /Games directory.
  
- **getPathByStoreKey:** Extends the search to game-specific store managers, encompassing a diverse range, including Blizzard, Epic, Gog, and Steam Store Managers.

- **getPathByRegistry Key:** Delves into the Windows Registry, scanning under key locations like HKEY_LOCAL_MACHINE/SOFTWARE, KEY_CURRENT_USER/SOFTWARE, and HKEY_CLASSES_ROOT/VirtualStore/MACHINE/SOFTWARE. When a registry key is identified, a directory is sought by probing into values such as Path, Install Dir, InstallDir, and InstallLocation. Alternatively, the directory location can be gleaned from values like Installed Path, ExePath, and Exe found within files.

In the intricate web of game folders, some games initiate from a sub-folder of the root game directory. Recognizing this diversity, games have the flexibility to specify additional paths, seamlessly amalgamating with the initially located root folder.

This comprehensive approach to centralized file management ensures that archivists and digital creators can navigate through the complexities of diverse game structures, optimizing their processes and fostering a more efficient and organized handling of game assets.

[,console]
----
findRegistryPath(...) with locate registry keys within this function:
    1. Search for the game using the specified registry key(s) in the Windows Registry under the following locations:
        HKEY_LOCAL_MACHINE/SOFTWARE
        KEY_CURRENT_USER/SOFTWARE
        HKEY_CLASSES_ROOT/VirtualStore/MACHINE/SOFTWARE
    2. Once a registry key is found a directory is attempted to be located by searching the following registry key values:
        Path
        Install Dir
        InstallDir
        InstallLocation
    3. Or getting the directory location from the file set in the following values:
        Installed Path
        ExePath
        Exe
----

[,python]
----
def findRegistryPath(paths):
    for p in paths:
        keyPath = p.replace('/', '\\')
        try: key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, f'SOFTWARE\\{keyPath}', 0, winreg.KEY_READ)
        except FileNotFoundError:
            try: key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, f'SOFTWARE\\{keyPath}', 0, winreg.KEY_READ)
            except FileNotFoundError:
                try: key = winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, f'VirtualStore\\MACHINE\\SOFTWARE\\{keyPath}', 0, winreg.KEY_READ)
                except FileNotFoundError: key = None
        if key is None: continue
        # search directories
        path = None
        for search in ['Path', 'Install Dir', 'InstallDir', 'InstallLocation']:
            try:
                val = winreg.QueryValueEx(key, search)[0]
                if os.path.isdir(val): path = val; break
            except FileNotFoundError: continue
        # search files
        if path is None:
            for search in ['Installed Path', 'ExePath', 'Exe']:
                try:
                    val = winreg.QueryValueEx(key, search)[0]
                    if os.path.exists(val): path = val; break
                except FileNotFoundError: continue
            if path is not None: path = os.path.dirname(path)
        if path is not None and os.path.isdir(path): return path
    return None
----


[COMMENT]
====
getPathWithSpecialFolders(...) with replace: %Path%, %AppPath%, %AppData%, %LocalAppData% within this function
====

[,python]
----
def getPathWithSpecialFolders(path, rootPath):
    return f'{rootPath}{path[6:]}' if path.startswith('%Path%') else \
    f'{FileManager.ApplicationPath}{path[9:]}' if path.startswith('%AppPath%') else \
    f'{os.getenv('APPDATA')}{path[9:]}' if path.startswith('%AppData%') else \
    f'{os.getenv('LOCALAPPDATA')}{path[14:]}' if path.startswith('%LocalAppData%') else \
    path
----


[NOTE]
====
The following combined python code will be our FileManager.
====

[,python]
----
include::../python/FileManager.py[]
----
