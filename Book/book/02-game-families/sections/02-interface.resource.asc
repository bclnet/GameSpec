==== Interface: Resource

A uri can be parsed to a Resource object and represents an asset.

* Family: parse resources from a family
* Schema: game, file, http, and https are supported schemas.
* Fragment: the fragment is used to determine the game
* A filesystem object is created and associate with the resouce, either to a local or remote connection 

[NOTE]
====
Note the importance of a Game ID in the url #fragment.
====

[cols="3,1,1,1"]
|===
|example |schema |query |game

|game:/MASTER.DAT#Fallout
|game
|MASTER.DAT
|Fallout

4+|Gets the MASTER.DAT pakfile for Fallout from a game search

|file:///G:/GogLibrary/Fallout/MASTER.DAT#Fallout
|file
|MASTER.DAT
|Fallout

4+|Gets the MASTER.DAT pakfile for Fallout from the filesystem

|https://localhost/MASTER.DAT#Fallout
|https
|MASTER.DAT
|Fallout

4+|Gets the MASTER.DAT pakfile for Fallout from the network
|===

[,python]
----
# parse Resource
def parseResource(self, uri: str, throwOnError: bool = True) -> Resource:
    if uri is None or not (uri := urlparse(uri)).fragment: return Resource(Game = FamilyGame(None, self, None, None))
    game = self.getGame(uri.fragment)
    searchPattern = '' if uri.scheme == 'file' else uri.path[1:]
    paths = self.fileManager.paths
    fileSystemType = game.fileSystemType
    fileSystem = \
        (createFileSystem(fileSystemType, paths[game.id][0]) if game.id in paths and paths[game.id] else None) if uri.scheme == 'game' else \
        (createFileSystem(fileSystemType, uri.path) if uri.path else None) if uri.scheme == 'file' else \
        (createFileSystem(fileSystemType, None, uri) if uri.netloc else None) if uri.scheme.startswith('http') else None
    if not fileSystem:
        if throwOnError: raise Exception(f'Unknown schema: {uri}')
        else: return None
    return Resource(fileSystem, game, searchPattern)
----