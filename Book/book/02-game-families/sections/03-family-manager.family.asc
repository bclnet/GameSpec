Each family has a json file. The game ids that start with * becomes the default game entry from which missing attributes are read from.
Along with family information the json file contains the engine, games and file manager elements.

Family:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the family

|name
|string
|name of the family

|studio
|string
|the studio related to the family

|description
|string
|a description for the family

|url
|url(s)
|urls related to this family

|engines
|FamilyEngine
|the related game engines

|games
|FamilyGame
|the related games

|fileManager
|FileManager
|the related file manager
|===

The following Family class will parse the json file. 

[,python]
----
class Family:
    def __init__(self, d):
        self.id = d['id']
        self.name = d['name'] if 'name' in d else None
        self.studio = d['studio'] if 'studio' in d else None
        self.description = d['description'] if 'description' in d else None
        self.urls = (d['url'] if isinstance(d['url'], list) else [d['url']]) if 'url' in d else []
        # engines
        self.engines = engines = {}
        if 'engines' in d:
            for (id, val) in d['engines'].items():
                engines[id] = FamilyEngine(self, id, val)
        # games
        self.games = games = {}
        dgame = FamilyGame(None, self, None, None)
        if 'games' in d:
            for (id, val) in d['games'].items():
                game = FamilyGame(dgame, self, id, val)
                if id.startswith('*'): dgame = game
                else: games[id] = game
        # file manager
        self.fileManager = FileManager(d['fileManager']) if 'fileManager' in d else None
    def __repr__(self): return f'''
{self.id}: {self.name}
engines: {[x for x in self.engines.values()] if self.engines else None}
games: {[x for x in self.games.values()] if self.games else None}
fileManager: {self.fileManager if self.fileManager else None}'''

    # get Game
    def getGame(self, id: str, throwOnError: bool = True) -> FamilyGame:
        game = self.games[id] if id in self.games else None
        if not game and throwOnError: raise Exception(f'Unknown game: {id}')
        return game
----