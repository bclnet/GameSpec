
==== Interface: Family.PakFile

PakFiles are the primary family objects, they are accessed from the `openPakFile()` method off of the `Family` object.

[,python]
----
class Family:
    # open PakFile
    def openPakFile(self, res, throwOnError: bool = True) -> PakFile:
        resource = res if isinstance(res, Resource) else \
            self.parseResource(res) if isinstance(res, str) else \
            None
        if not resource:
            if throwOnError: raise Exception(f'Unknown res: {res}')
            else: return None
        if not resource.game: raise Exception(f'Undefined Game')
        return (pak := resource.game.createPakFile(resource.fileSystem, resource.searchPattern, throwOnError)) and pak.open()

class FamilyGame:
    # create SearchPatterns
    def createSearchPatterns(self, searchPattern: str) -> str:
        if searchPattern: return searchPattern
        elif not self.searchBy: return '*'
        elif self.searchBy == 'Pak': return '' if not self.pakExts else f'*{self.pakExts[0]}' if self.pakExts.length == 1 else f'({'*:'.join(self.pakExts)})'
        elif self.searchBy == 'TopDir': return '*'
        elif self.searchBy == 'TwoDir': return '*/*'
        elif self.searchBy == 'AllDir': return '**/*'
        else: raise Exception(f'Unknown searchBy: {self.searchBy}')

    # create PakFile
    def createPakFile(self, fileSystem: FileSystem, searchPattern: str, throwOnError: bool) -> PakFile:
        if isinstance(fileSystem, HostFileSystem): raise Exception('HostFileSystem not supported')
        searchPattern = self.createSearchPatterns(searchPattern)
        pakFiles = []
        for p in self.findPaths(fileSystem, searchPattern):
            if self.searchBy == 'Pak':
                for path in p[1]:
                    if self.isPakFile(path): pakFiles.append(self.createPakFileObj(fileSystem, path))
            else: pakFiles.append(self.createPakFileObj(fileSystem, p))
        return self.createPakFileObj(fileSystem, pakFiles)

    # create createPakFileObj
    def createPakFileObj(self, fileSystem: FileSystem, value, tag = None) -> PakFile:
        if isinstance(value, str):
            if self.isPakFile(value): return self.createPakFileType(fileSystem, value, tag)
            else: raise Exception(f'{self.id} missing {value}')
        elif isinstance(value, tuple):
            p, l = value
            return self.createPakFileObj(fileSystem, l[0], tag) if len(l) == 1 and self.isPakFile(l[0]) \
                else ManyPakFile(self.createPakFileType(fileSystem, '', tag), self, v.Item1 if len(p) > 0 else 'Many', fileSystem, l, visualPathSkip = len(p) + 1 if len(p) > 0 else 0)
        elif isinstance(value, list):
            return value[0] if len(value) == 1 \
                else MultiPakFile(self, 'Multi', fileSystem, v, tag)
        elif value is None: return None
        else: raise Exception(f'Unknown: {value}')

    # create PakFileType
    def createPakFileType(self, fileSystem: FileSystem, path: str, tag = None) -> PakFile:
        if not self.pakFileType: raise Exception(f'{self.id} missing PakFileType')
        return findType(self.pakFileType)(self, fileSystem, path, tag)

    # find Paths
    def findPaths(self, fileSystem: FileSystem, searchPattern: str):
        ignores = self.family.fileManager.ignores
        gameIgnores = ignores[self.id] if self.id in ignores else None
        for path in self.paths or ['']:
            fileSearch = fileSystem.findPaths(path, searchPattern)
            if gameIgnores: fileSearch = [x for x in fileSearch if not os.path.filename(x) in gameIgnores]
            yield (path, list(fileSearch))

    # is a PakFile
    def isPakFile(self, path: str) -> bool:
        return any([x for x in self.pakExts if x.endswith(x)])
----

