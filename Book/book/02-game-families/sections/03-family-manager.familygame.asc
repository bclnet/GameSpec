Family Game:
[col="1,1,1,1"]
|===
|Name |Type |Description |Default

|id
|string
|identifer for the game
|-

|ignore
|boolean
|true if ignore this game, uses 'n/a' as the element
|default

|name
|string
|name of the game
|-

|engine
|string
|the engine used by this game
|default

|url
|url(s)
|urls related to this family
|-

|date
|date
|the release date
|-

|path
|string(s)
|paths to include
|default

|key
|string
|the encryption key if needed
|default

|status
|string(s)
|the current decoding status for this game
|-

|tags
|string(s)
|additonal tags for this game
|-

|fileSystemType
|string(s)
|the file system object to create
|default

|searchBy
|picklist
|the way to find files for this game
|default

|pakFileType
|string(s)
|the pak object to create
|default

|pakExt
|string(s)
|the file extensions for archive files
|default

|editions
|FamilyEngine
|the related game editions
|-

|dlc
|FamilyGame
|the related downloadable content
|-

|locales
|FileManager
|the related locales
|-
|===

Edition:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the edition

|name
|string
|name of the edition

|key
|string
|the encryption key if needed
|===

DownloadableContent:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the dlc

|name
|string
|name of the dlc

|path
|string(s)
|the relative path to the dlc
|===

Locale:
[col="1,1,1"]
|===
|Name |Type |Description

|id
|string
|identifer for the locale

|name
|string
|name of the locale
|===


game key and game edition keys are parsed with the following logic

[,python]
----
# parse keypy
@staticmethod
def parseKey(key) -> Any:
    if not key: return None
    elif key.startswith('aes:'): return bytes.fromhex(key[4:].replace('/x', ''))
    elif key.startswith('txt:'): return key[4:].encode('ascii')
    else: raise Exception(f'Unknown key: {key}')
----

The game element are more complicated containing sub classes and handled with the following class:
[,python]
----
class FamilyGame:
    class Edition:
        def __init__(self, id: str, d):
            self.id = id
            self.name = d['name'] if 'name' in d else None
            self.key = self.parseKey(d['key']) if 'key' in d else None
        def __repr__(self): return f'{self.id}: {self.name}'
    class DownloadableContent:
        def __init__(self, id: str, d):
            self.id = id
            self.name = d['name'] if 'name' in d else None
            self.path = d['path'] if 'path' in d else None
        def __repr__(self): return f'{self.id}: {self.name}'
    class Locale:
        def __init__(self, id: str, d):
            self.id = id
            self.name = d['name'] if 'name' in d else None
        def __repr__(self): return f'{self.id}: {self.name}'
    def __init__(self, dgame, family: Family, id: str, d):
        self.family = family
        self.id = id
        if not dgame: self.ignore = False; self.engine = self.paths = self.key = self.fileSystemType = self.searchBy = self.pakFileType = self.pakExts = None; return
        self.ignore = d['n/a'] if 'n/a' in d else dgame.ignore
        self.name = d['name'] if 'name' in d else None
        self.engine = d['engine'] if 'engine' in d else dgame.engine
        self.urls = (d['url'] if isinstance(d['url'], list) else [d['url']]) if 'url' in d else None
        self.date = d['date'] if 'date' in d else None
        #self.option
        #self.paks
        #self.dats
        self.paths = (d['path'] if isinstance(d['path'], list) else [d['path']]) if 'path' in d else dgame.paths
        self.key = self.parseKey(d['key']) if 'key' in d else dgame.key
        self.status = d['status'] if 'status' in d else None
        self.tags = d['tags'] if 'tags' in d else None
        # interface
        self.fileSystemType = d['fileSystemType'] if 'fileSystemType' in d else dgame.fileSystemType
        self.searchBy = d['searchBy'] if 'searchBy' in d else dgame.searchBy
        self.pakFileType = d['pakFileType'] if 'pakFileType' in d else dgame.pakFileType
        self.pakExts = (d['pakExt'] if isinstance(d['pakExt'], list) else [d['pakExt']]) if 'pakExt' in d else dgame.pakExts
        # related
        self.editions = editions = {}
        if 'editions' in d:
            for (id, val) in d['editions'].items():
                editions[id] = FamilyGame.Edition(id, val)
        self.dlcs = dlcs = {}
        if 'dlcs' in d:
            for (id, val) in d['dlcs'].items():
                dlcs[id] = FamilyGame.DownloadableContent(id, val)
        self.locales = locales = {}
        if 'locales' in d:
            for (id, val) in d['locales'].items():
                locales[id] = FamilyGame.Locale(id, val)
    def __repr__(self): return f'''
  {self.id}: {self.name} {self.status}
  - editions: {self.editions if self.editions else None}
  - dlcs: {self.dlcs if self.dlcs else None}
  - locales: {self.locales if self.locales else None}'''

    # create SearchPatterns
    @staticmethod
    def parseKey(key) -> Any:
        print(key)
        pass
----